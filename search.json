[{"path":"https://ethanplunkett.github.io/resistantkernel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Plunkett. Maintainer.","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Compton B, Plunkett E, Ene E (2024). resistantkernel: Calculates least cost paths resistant kernels. R package version 0.0.0.9021, https://ethanplunkett.github.io/resistantkernel/, https://github.com/ethanplunkett/resistantkernel.","code":"@Manual{,   title = {resistantkernel: Calculates least cost paths and resistant kernels},   author = {Brad Compton and Ethan Plunkett and Eduard Ene},   year = {2024},   note = {R package version 0.0.0.9021, https://ethanplunkett.github.io/resistantkernel/},   url = {https://github.com/ethanplunkett/resistantkernel}, }"},{"path":"https://ethanplunkett.github.io/resistantkernel/index.html","id":"resistantkernel","dir":"","previous_headings":"","what":"Calculates least cost paths and resistant kernels","title":"Calculates least cost paths and resistant kernels","text":"resistantkernel package calculates Compton et al. (2007) resistant kernels. raw_spread() creates kernel encodes least cost path resistant surface focal cell neighboring cells. spread() converts raw kernel Gaussian function cost distance neighboring cells. minimally resistant surface result matches Gaussian kernel. Higher resistance values increase cost distance neighboring cells compress kernel. Resistant kernels can used quantify much parts landscape accessible animal home range centered , starting movement focal cell. Resistant kernels can also used variable width buffering around high value conservation land. case conservation value converted resistant surface kernel initiated one many high value cells resulting surface thresholded create buffer extends farther higher value portions landscape.","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculates least cost paths and resistant kernels","text":"can install development version resistantkernel GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ethanplunkett/resistantkernel\")"},{"path":"https://ethanplunkett.github.io/resistantkernel/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Calculates least cost paths and resistant kernels","text":"One use resistantkernels calculate much landscape accessible animal particular point space… PENDING","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Calculates least cost paths and resistant kernels","text":"Compton BW, McGarigal K, Cushman SA, Gamble LR. resistant-kernel model connectivity amphibians breed vernal pools. Conserv Biol. 2007 Jun;21(3):788-99. doi: 10.1111/j.1523-1739.2007.00674.x. PMID: 17531056","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/raw_spread.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface for the C++ spread code - mainly for internal use — raw_spread","title":"Interface for the C++ spread code - mainly for internal use — raw_spread","text":"raw_spread() takes spread value, focal cell coordinates, resistance matrix (values >= 1); executes resistant spread; returns final snapshot spread matrix.","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/raw_spread.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface for the C++ spread code - mainly for internal use — raw_spread","text":"","code":"raw_spread(x, spread_value, row, col, square = FALSE, symmetrical = TRUE)"},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/raw_spread.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface for the C++ spread code - mainly for internal use — raw_spread","text":"x resistance matrix, values must >= 1 spread_value initial bank account spread, depleted based resistance cell spread progresses. row focal row spread col focal column spread square TRUE diagonal cells considered one cell length away center spread tend square. default FALSE uses diagonal length 1.4 cells spreads tend octagonal. symmetrical TRUE average resistance source neighboring destination cell used represent cost stepping neighboring cell. FALSE destination cell used represent cost step. original 2009 algorithm equivalent FALSE. TRUE cost difference source (necessarily adjacent) destination  cost distance destination source, include half cost traversing source destination cells. FALSE guaranteed source cell cost included full destination cell cost .","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/raw_spread.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface for the C++ spread code - mainly for internal use — raw_spread","text":"matrix dimensions x values represent functional proximity focal cell.  range spread_value (focal cell) zero cells greater spread_value (cost) away focal cell.","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/raw_spread.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface for the C++ spread code - mainly for internal use — raw_spread","text":"raw_spread() calculates functional proximity cell focal cell. proximity highest focal cell equal spread_value diminishing distance focal cell (based resistance intervening cells).  functional proximity thus zero cells functional distance greater spread_value focal cell, regardless much greater. practice larger spread values allow calculation larger functional distances requires processor time.","code":""},{"path":[]},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/raw_spread.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interface for the C++ spread code - mainly for internal use — raw_spread","text":"","code":"# Create (minimally resistant) test matrix  a <- matrix(1, 5, 5) a #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    1 #> [2,]    1    1    1    1    1 #> [3,]    1    1    1    1    1 #> [4,]    1    1    1    1    1 #> [5,]    1    1    1    1    1 raw_spread(a, 10, 3, 3, FALSE, TRUE) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  7.2  7.6    8  7.6  7.2 #> [2,]  7.6  8.6    9  8.6  7.6 #> [3,]  8.0  9.0   10  9.0  8.0 #> [4,]  7.6  8.6    9  8.6  7.6 #> [5,]  7.2  7.6    8  7.6  7.2  # Add two higher resistance bands a[2, ]  <- 5 a[,2] <- 5 a #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    5    1    1    1 #> [2,]    5    5    5    5    5 #> [3,]    1    5    1    1    1 #> [4,]    1    5    1    1    1 #> [5,]    1    5    1    1    1 # Average of source and destination resistance used with each step raw_spread(a, 10, 3, 3, square = FALSE, symmetrical =  FALSE)  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  1.6    0    4  3.6  2.6 #> [2,]  0.0    3    5  4.0  3.0 #> [3,]  4.0    5   10  9.0  8.0 #> [4,]  3.6    4    9  8.6  7.6 #> [5,]  2.6    3    8  7.6  7.2  # Destination resistance used with each step raw_spread(a, 10, 3, 3, square = FALSE, symmetrical = TRUE)   #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  1.6  1.0    4  3.0  2.0 #> [2,]  1.0  5.8    7  6.0  5.0 #> [3,]  4.0  7.0   10  9.0  8.0 #> [4,]  3.0  6.0    9  8.6  7.6 #> [5,]  2.0  5.0    8  7.6  7.2   # Square: the diagonal cost same as orthogonal  a[,] <- 1 raw_spread(a, 10, 3, 3, square = TRUE, symmetrical =  FALSE)  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    8    8    8    8    8 #> [2,]    8    9    9    9    8 #> [3,]    8    9   10    9    8 #> [4,]    8    9    9    9    8 #> [5,]    8    8    8    8    8"},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/resistantkernel-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function(s) in the resistantkernel package — resistantkernel-deprecated","title":"Deprecated function(s) in the resistantkernel package — resistantkernel-deprecated","text":"functions provided compatibility older version resistantkernel earlier spread gridprocess packages.  may eventually completely removed. raw.spread() replaced raw_spread()","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/resistantkernel-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated function(s) in the resistantkernel package — resistantkernel-deprecated","text":"","code":"raw.spread(x, spread.value, row, col)"},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/resistantkernel-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated function(s) in the resistantkernel package — resistantkernel-deprecated","text":"x, row, col Passed raw_spread spread.value passed spread_value raw_spread() ... Parameters passed current version functions","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/resistantkernel-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated function(s) in the resistantkernel package — resistantkernel-deprecated","text":"See current versions functions.","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/resistantkernel-package.html","id":null,"dir":"Reference","previous_headings":"","what":"resistantkernel: Calculates least cost paths and resistant kernels — resistantkernel-package","title":"resistantkernel: Calculates least cost paths and resistant kernels — resistantkernel-package","text":"functions useful measuring (least cost) functional distances based resistant surface, size resistant kernel points surface (one way measuring habitat quality).","code":""},{"path":[]},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/spread.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a Gaussian resistant kernel — spread","title":"Calculate a Gaussian resistant kernel — spread","text":"Calculate Gaussian resistant kernel","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/spread.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a Gaussian resistant kernel — spread","text":"","code":"spread(x, ...)  # S3 method for matrix spread(   x,   row,   col,   sd,   cellsize = 1,   sd_threshold = 3,   square = FALSE,   symmetrical = TRUE,   ... )"},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/spread.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a Gaussian resistant kernel — spread","text":"x matrix resistance values >=1 ... Arguments passed methods. row focal row spread col focal column spread sd standard deviation Gaussian function cost length (resistance * physical distance). resulting spread equivalent Gaussian kernel standard deviation applied minimally resistant surface: resistance 1 cells. cellsize size cell physical units, typically meters. sd_threshold number standard deviations beyond height surface calculated square TRUE diagonal cells considered one cell length away center spread tend square. default FALSE uses diagonal length 1.4 cells spreads tend octagonal. symmetrical TRUE average resistance source neighboring destination cell used represent cost stepping neighboring cell. FALSE destination cell used represent cost step. original 2009 algorithm equivalent FALSE. TRUE cost difference source (necessarily adjacent) destination  cost distance destination source, include half cost traversing source destination cells. FALSE guaranteed source cell cost included full destination cell cost .","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/spread.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a Gaussian resistant kernel — spread","text":"matrix dimensions x representing Gaussian spread focal cell.","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/spread.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate a Gaussian resistant kernel — spread","text":"height kernel returned dependent sd get calling dnorm(cost_dist_to_center, sd=sd). One side effect larger sd lower height. can normalize dividing resultant kernel dnorm(0, sd = sd) make height center kernel 1.","code":""},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/spread.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate a Gaussian resistant kernel — spread","text":"Compton BW, McGarigal K, Cushman SA, Gamble LR. resistant-kernel model connectivity amphibians breed vernal pools. Conserv Biol. 2007 Jun;21(3):788-99. doi: 10.1111/j.1523-1739.2007.00674.x. PMID: 17531056.","code":""},{"path":[]},{"path":"https://ethanplunkett.github.io/resistantkernel/reference/spread.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a Gaussian resistant kernel — spread","text":"","code":"#' # a minimally resistant matrix: b <- matrix(1, 10, 10)  # the resulting spread image(spread(b, 3, 3, 3) / dnorm(0, sd=3)  )   # a cross section of the spread compared to dnorm() plot(spread(b, 3, 3, 3)[,3]) curve(dnorm(x, 3, 3), add=TRUE)   # add a higher resistance band b[5,] <- 3  image(spread(b, 3, 3, 3) / dnorm(0, sd=3)  )   plot(spread(b, 3, 3, 3)[,3]) abline(v = 5, col = \"red\") # location of higher resistance curve(dnorm(x, 3, 3), add=TRUE)"},{"path":[]}]
